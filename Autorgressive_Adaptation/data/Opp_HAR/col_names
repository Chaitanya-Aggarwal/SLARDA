MILLISEC
Accelerometer RKN^ accX; value = round(original_value), unit = milli g
Accelerometer RKN^ accY; value = round(original_value), unit = milli g
Accelerometer RKN^ accZ; value = round(original_value), unit = milli g
Accelerometer HIP accX; value = round(original_value), unit = milli g
Accelerometer HIP accY; value = round(original_value), unit = milli g
Accelerometer HIP accZ; value = round(original_value), unit = milli g
Accelerometer LUA^ accX; value = round(original_value), unit = milli g
Accelerometer LUA^ accY; value = round(original_value), unit = milli g
Accelerometer LUA^ accZ; value = round(original_value), unit = milli g
Accelerometer RUA_ accX; value = round(original_value), unit = milli g
Accelerometer RUA_ accY; value = round(original_value), unit = milli g
Accelerometer RUA_ accZ; value = round(original_value), unit = milli g
Accelerometer LH accX; value = round(original_value), unit = milli g
Accelerometer LH accY; value = round(original_value), unit = milli g
Accelerometer LH accZ; value = round(original_value), unit = milli g
Accelerometer BACK accX; value = round(original_value), unit = milli g
Accelerometer BACK accY; value = round(original_value), unit = milli g
Accelerometer BACK accZ; value = round(original_value), unit = milli g
Accelerometer RKN_ accX; value = round(original_value), unit = milli g
Accelerometer RKN_ accY; value = round(original_value), unit = milli g
Accelerometer RKN_ accZ; value = round(original_value), unit = milli g
Accelerometer RWR accX; value = round(original_value), unit = milli g
Accelerometer RWR accY; value = round(original_value), unit = milli g
Accelerometer RWR accZ; value = round(original_value), unit = milli g
Accelerometer RUA^ accX; value = round(original_value), unit = milli g
Accelerometer RUA^ accY; value = round(original_value), unit = milli g
Accelerometer RUA^ accZ; value = round(original_value), unit = milli g
Accelerometer LUA_ accX; value = round(original_value), unit = milli g
Accelerometer LUA_ accY; value = round(original_value), unit = milli g
Accelerometer LUA_ accZ; value = round(original_value), unit = milli g
Accelerometer LWR accX; value = round(original_value), unit = milli g
Accelerometer LWR accY; value = round(original_value), unit = milli g
Accelerometer LWR accZ; value = round(original_value), unit = milli g
Accelerometer RH accX; value = round(original_value), unit = milli g
Accelerometer RH accY; value = round(original_value), unit = milli g
Accelerometer RH accZ; value = round(original_value), unit = milli g
InertialMeasurementUnit BACK accX; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit BACK accY; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit BACK accZ; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit BACK gyroX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit BACK gyroY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit BACK gyroZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit BACK magneticX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit BACK magneticY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit BACK magneticZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit BACK Quaternion1; value = round(original_value * 1000), unit = none
InertialMeasurementUnit BACK Quaternion2; value = round(original_value * 1000), unit = none
InertialMeasurementUnit BACK Quaternion3; value = round(original_value * 1000), unit = none
InertialMeasurementUnit BACK Quaternion4; value = round(original_value * 1000), unit = none
InertialMeasurementUnit RUA accX; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit RUA accY; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit RUA accZ; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit RUA gyroX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RUA gyroY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RUA gyroZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RUA magneticX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RUA magneticY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RUA magneticZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RUA Quaternion1; value = round(original_value * 1000), unit = none
InertialMeasurementUnit RUA Quaternion2; value = round(original_value * 1000), unit = none
InertialMeasurementUnit RUA Quaternion3; value = round(original_value * 1000), unit = none
InertialMeasurementUnit RUA Quaternion4; value = round(original_value * 1000), unit = none
InertialMeasurementUnit RLA accX; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit RLA accY; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit RLA accZ; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit RLA gyroX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RLA gyroY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RLA gyroZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RLA magneticX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RLA magneticY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RLA magneticZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit RLA Quaternion1; value = round(original_value * 1000), unit = none
InertialMeasurementUnit RLA Quaternion2; value = round(original_value * 1000), unit = none
InertialMeasurementUnit RLA Quaternion3; value = round(original_value * 1000), unit = none
InertialMeasurementUnit RLA Quaternion4; value = round(original_value * 1000), unit = none
InertialMeasurementUnit LUA accX; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit LUA accY; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit LUA accZ; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit LUA gyroX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LUA gyroY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LUA gyroZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LUA magneticX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LUA magneticY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LUA magneticZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LUA Quaternion1; value = round(original_value * 1000), unit = none
InertialMeasurementUnit LUA Quaternion2; value = round(original_value * 1000), unit = none
InertialMeasurementUnit LUA Quaternion3; value = round(original_value * 1000), unit = none
InertialMeasurementUnit LUA Quaternion4; value = round(original_value * 1000), unit = none
InertialMeasurementUnit LLA accX; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit LLA accY; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit LLA accZ; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit LLA gyroX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LLA gyroY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LLA gyroZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LLA magneticX; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LLA magneticY; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LLA magneticZ; value = round(original_value * 1000), unit = unknown
InertialMeasurementUnit LLA Quaternion1; value = round(original_value * 1000), unit = none
InertialMeasurementUnit LLA Quaternion2; value = round(original_value * 1000), unit = none
InertialMeasurementUnit LLA Quaternion3; value = round(original_value * 1000), unit = none
InertialMeasurementUnit LLA Quaternion4; value = round(original_value * 1000), unit = none
InertialMeasurementUnit L-SHOE EuX; value = round(original_value), unit = degrees
InertialMeasurementUnit L-SHOE EuY; value = round(original_value), unit = degrees
InertialMeasurementUnit L-SHOE EuZ; value = round(original_value), unit = degrees
InertialMeasurementUnit L-SHOE Nav_Ax; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit L-SHOE Nav_Ay; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit L-SHOE Nav_Az; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit L-SHOE Body_Ax; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit L-SHOE Body_Ay; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit L-SHOE Body_Az; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit L-SHOE AngVelBodyFrameX; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit L-SHOE AngVelBodyFrameY; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit L-SHOE AngVelBodyFrameZ; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit L-SHOE AngVelNavFrameX; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit L-SHOE AngVelNavFrameY; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit L-SHOE AngVelNavFrameZ; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit L-SHOE Compass; value = round(original_value), unit = degrees
InertialMeasurementUnit R-SHOE EuX; value = round(original_value), unit = degrees
InertialMeasurementUnit R-SHOE EuY; value = round(original_value), unit = degrees
InertialMeasurementUnit R-SHOE EuZ; value = round(original_value), unit = degrees
InertialMeasurementUnit R-SHOE Nav_Ax; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit R-SHOE Nav_Ay; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit R-SHOE Nav_Az; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit R-SHOE Body_Ax; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit R-SHOE Body_Ay; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit R-SHOE Body_Az; value = round(original_value / 9.8 * 1000), unit = milli g
InertialMeasurementUnit R-SHOE AngVelBodyFrameX; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit R-SHOE AngVelBodyFrameY; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit R-SHOE AngVelBodyFrameZ; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit R-SHOE AngVelNavFrameX; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit R-SHOE AngVelNavFrameY; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit R-SHOE AngVelNavFrameZ; value = round(original_value * 1000), unit = mm/s
InertialMeasurementUnit R-SHOE Compass; value = round(original_value), unit = degrees
Accelerometer CUP accX; value = round(original_value), unit = milli g
Accelerometer CUP accX; value = round(original_value), unit = milli g
Accelerometer CUP accX; value = round(original_value), unit = milli g
Accelerometer CUP gyroX; value = round(original_value), unit = unknown
Accelerometer CUP gyroY; value = round(original_value), unit = unknown
Accelerometer SALAMI accX; value = round(original_value), unit = milli g
Accelerometer SALAMI accX; value = round(original_value), unit = milli g
Accelerometer SALAMI accX; value = round(original_value), unit = milli g
Accelerometer SALAMI gyroX; value = round(original_value), unit = unknown
Accelerometer SALAMI gyroY; value = round(original_value), unit = unknown
Accelerometer WATER accX; value = round(original_value), unit = milli g
Accelerometer WATER accX; value = round(original_value), unit = milli g
Accelerometer WATER accX; value = round(original_value), unit = milli g
Accelerometer WATER gyroX; value = round(original_value), unit = unknown
Accelerometer WATER gyroY; value = round(original_value), unit = unknown
Accelerometer CHEESE accX; value = round(original_value), unit = milli g
Accelerometer CHEESE accX; value = round(original_value), unit = milli g
Accelerometer CHEESE accX; value = round(original_value), unit = milli g
Accelerometer CHEESE gyroX; value = round(original_value), unit = unknown
Accelerometer CHEESE gyroY; value = round(original_value), unit = unknown
Accelerometer BREAD accX; value = round(original_value), unit = milli g
Accelerometer BREAD accX; value = round(original_value), unit = milli g
Accelerometer BREAD accX; value = round(original_value), unit = milli g
Accelerometer BREAD gyroX; value = round(original_value), unit = unknown
Accelerometer BREAD gyroY; value = round(original_value), unit = unknown
Accelerometer KNIFE1 accX; value = round(original_value), unit = milli g
Accelerometer KNIFE1 accX; value = round(original_value), unit = milli g
Accelerometer KNIFE1 accX; value = round(original_value), unit = milli g
Accelerometer KNIFE1 gyroX; value = round(original_value), unit = unknown
Accelerometer KNIFE1 gyroY; value = round(original_value), unit = unknown
Accelerometer MILK accX; value = round(original_value), unit = milli g
Accelerometer MILK accX; value = round(original_value), unit = milli g
Accelerometer MILK accX; value = round(original_value), unit = milli g
Accelerometer MILK gyroX; value = round(original_value), unit = unknown
Accelerometer MILK gyroY; value = round(original_value), unit = unknown
Accelerometer SPOON accX; value = round(original_value), unit = milli g
Accelerometer SPOON accX; value = round(original_value), unit = milli g
Accelerometer SPOON accX; value = round(original_value), unit = milli g
Accelerometer SPOON gyroX; value = round(original_value), unit = unknown
Accelerometer SPOON gyroY; value = round(original_value), unit = unknown
Accelerometer SUGAR accX; value = round(original_value), unit = milli g
Accelerometer SUGAR accX; value = round(original_value), unit = milli g
Accelerometer SUGAR accX; value = round(original_value), unit = milli g
Accelerometer SUGAR gyroX; value = round(original_value), unit = unknown
Accelerometer SUGAR gyroY; value = round(original_value), unit = unknown
Accelerometer KNIFE2 accX; value = round(original_value), unit = milli g
Accelerometer KNIFE2 accX; value = round(original_value), unit = milli g
Accelerometer KNIFE2 accX; value = round(original_value), unit = milli g
Accelerometer KNIFE2 gyroX; value = round(original_value), unit = unknown
Accelerometer KNIFE2 gyroY; value = round(original_value), unit = unknown
Accelerometer PLATE accX; value = round(original_value), unit = milli g
Accelerometer PLATE accX; value = round(original_value), unit = milli g
Accelerometer PLATE accX; value = round(original_value), unit = milli g
Accelerometer PLATE gyroX; value = round(original_value), unit = unknown
Accelerometer PLATE gyroY; value = round(original_value), unit = unknown
Accelerometer GLASS accX; value = round(original_value), unit = milli g
Accelerometer GLASS accX; value = round(original_value), unit = milli g
Accelerometer GLASS accX; value = round(original_value), unit = milli g
Accelerometer GLASS gyroX; value = round(original_value), unit = unknown
Accelerometer GLASS gyroY; value = round(original_value), unit = unknown
REED SWITCH DISHWASHER S1; value = original_value, unit = logical (0/1)
REED SWITCH FRIDGE S3; value = original_value, unit = logical (0/1)
REED SWITCH FRIDGE S2; value = original_value, unit = logical (0/1)
REED SWITCH FRIDGE S1; value = original_value, unit = logical (0/1)
REED SWITCH MIDDLEDRAWER S1; value = original_value, unit = logical (0/1)
REED SWITCH MIDDLEDRAWER S2; value = original_value, unit = logical (0/1)
REED SWITCH MIDDLEDRAWER S3; value = original_value, unit = logical (0/1)
REED SWITCH LOWERDRAWER S3; value = original_value, unit = logical (0/1)
REED SWITCH LOWERDRAWER S2; value = original_value, unit = logical (0/1)
REED SWITCH UPPERDRAWER; value = original_value, unit = logical (0/1)
REED SWITCH DISHWASHER S3; value = original_value, unit = logical (0/1)
REED SWITCH LOWERDRAWER S1; value = original_value, unit = logical (0/1)
REED SWITCH DISHWASHER S2; value = original_value, unit = logical (0/1)
Accelerometer DOOR1 accX; value = round(original_value), unit = milli g
Accelerometer DOOR1 accY; value = round(original_value), unit = milli g
Accelerometer DOOR1 accZ; value = round(original_value), unit = milli g
Accelerometer LAZYCHAIR accX; value = round(original_value), unit = milli g
Accelerometer LAZYCHAIR accY; value = round(original_value), unit = milli g
Accelerometer LAZYCHAIR accZ; value = round(original_value), unit = milli g
Accelerometer DOOR2 accX; value = round(original_value), unit = milli g
Accelerometer DOOR2 accY; value = round(original_value), unit = milli g
Accelerometer DOOR2 accZ; value = round(original_value), unit = milli g
Accelerometer DISHWASHER accX; value = round(original_value), unit = milli g
Accelerometer DISHWASHER accY; value = round(original_value), unit = milli g
Accelerometer DISHWASHER accZ; value = round(original_value), unit = milli g
Accelerometer UPPERDRAWER accX; value = round(original_value), unit = milli g
Accelerometer UPPERDRAWER accY; value = round(original_value), unit = milli g
Accelerometer UPPERDRAWER accZ; value = round(original_value), unit = milli g
Accelerometer LOWERDRAWER accX; value = round(original_value), unit = milli g
Accelerometer LOWERDRAWER accY; value = round(original_value), unit = milli g
Accelerometer LOWERDRAWER accZ; value = round(original_value), unit = milli g
Accelerometer MIDDLEDRAWER accX; value = round(original_value), unit = milli g
Accelerometer MIDDLEDRAWER accY; value = round(original_value), unit = milli g
Accelerometer MIDDLEDRAWER accZ; value = round(original_value), unit = milli g
Accelerometer FRIDGE accX; value = round(original_value), unit = milli g
Accelerometer FRIDGE accY; value = round(original_value), unit = milli g
Accelerometer FRIDGE accZ; value = round(original_value), unit = milli g
LOCATION TAG1 X; value = round(original_value), unit = millimetres
LOCATION TAG1 Y; value = round(original_value), unit = millimetres
LOCATION TAG1 Z; value = round(original_value), unit = millimetres
LOCATION TAG2 X; value = round(original_value), unit = millimetres
LOCATION TAG2 Y; value = round(original_value), unit = millimetres
LOCATION TAG2 Z; value = round(original_value), unit = millimetres
LOCATION TAG3 X; value = round(original_value), unit = millimetres
LOCATION TAG3 Y; value = round(original_value), unit = millimetres
LOCATION TAG3 Z; value = round(original_value), unit = millimetres
LOCATION TAG4 X; value = round(original_value), unit = millimetres
LOCATION TAG4 Y; value = round(original_value), unit = millimetres
LOCATION TAG4 Z; value = round(original_value), unit = millimetres
Locomotion
HL_Activity
LL_Left_Arm
LL_Left_Arm_Object
LL_Right_Arm
LL_Right_Arm_Object
ML_Both_Arms
